version: '3.8'

services:
  web:
    build:
      context: ./app
      dockerfile: Dockerfile.prod
    command: newrelic-admin run-program gunicorn config.wsgi:application --bind 0.0.0.0:8000 --reload
    volumes:
      - static_volume:/home/app/web/staticfiles
    expose:
      - 8000
    environment:
      - NEW_RELIC_CONFIG_FILE=newrelic.ini
    env_file:
      - ./.env.prod
    depends_on:
      - db
      - redis
  db:
    image: postgres:13.0-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env.prod.db
  nginx:
    image: nginx:latest
    volumes:
      - ./nginx/:/etc/nginx/conf.d/:ro
      - static_volume:/home/app/web/staticfiles
    ports:
      - 80:80
    depends_on:
      - web
  redis:
    image: redis:alpine
  celery:
    build:
      context: ./app
      dockerfile: Dockerfile.prod
    command: celery -A config worker -l info
    volumes:
      - ./app/:/usr/src/app/
    env_file:
      - ./.env.prod
    depends_on:
      - redis
  celery-beat:
    build:
      context: ./app
      dockerfile: Dockerfile.prod
    command: celery -A config beat -l info
    volumes:
      - ./app/:/usr/src/app/
    env_file:
      - ./.env.prod
    depends_on:
      - redis
  agent:
    container_name: newrelic-infra
    build:
      context: ./newrelic-infra-setup
      dockerfile: newrelic-infra.dockerfile
    cap_add:
      - SYS_PTRACE
    network_mode: host
    pid: host
    privileged: true
    volumes:
      - "/:/host:ro"
      - "/var/run/docker.sock:/var/run/docker.sock"
    env_file:
      - ./.env.prod
    restart: unless-stopped
volumes:
  postgres_data:
  static_volume:
